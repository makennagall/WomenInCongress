shiny::runApp()
runApp()
runApp(display.mode = "showcase")
runApp()
runApp('CongressApp.R')
runApp('CongressApp.R')
frequency <- read.csv('https://raw.githubusercontent.com/makennagall/WomenInCongress/main/frequency.csv')
Frequency <- read.csv('https://raw.githubusercontent.com/makennagall/WomenInCongress/main/frequency.csv')
WomenPerSession <- read.csv('https://raw.githubusercontent.com/makennagall/WomenInCongress/main/WomenPerSession.csv')
AllOutput <- read.csv('https://raw.githubusercontent.com/makennagall/WomenInCongress/main/compiledNewOutputs.csv')
TermsCount <- read.csv('https://raw.githubusercontent.com/makennagall/WomenInCongress/main/termsCountNew.csv')
runApp('CongressApp.R')
colnames(Frequency)
runApp('CongressApp.R')
library(shiny)
library(plotly)
runApp('CongressApp.R')
runApp('CongressApp.R')
typeof(Frequency$Term)
Frequency$Term
typeof(Frequency$TermsCount)
typeof(TermsCount)
typeof(Frequency)
Frequency
termList = as.list(Frequency)
termList
termList$Term
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
termList %>% mutate(termList = fct_reorder(termList, .[[Frequency]]))
library(dplyr)
termList %>% mutate(termList = fct_reorder(termList, .[[Frequency]]))
TermsCount %>% mutate(TermsCount = fct_reorder(TermsCount, .[[Frequency]]))
Frequency %>% mutate(Frequency = fct_reorder(Frequency, .[[Frequency$Frequency]]))
Frequency %>% mutate(Frequency = fct_reorder(Frequency, .[[Frequency]]))
runApp('CongressApp.R')
colnames(AllOutput)
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
plot_ly(data = termDataJoined,
type = "scatter",
mode = "markers",
x = ~LatestActionYear,
y = ~DayMonth,
color = ~term,
hoverinfo = 'text',
text = ~paste("Title:", title, "<br>", URL, "<br>Total Women: ", Total.Women, "<br>Sponsor: ", Sponsor))
#add a date variable that contains day, month and year and is a Date object:
AllOutput <- mutate(AllOutput, date = paste(LatestActionMonth,"/",LatestActionDay,"/",Latest.Action.Year, sep = ""))
#add a date variable that contains day, month and year and is a Date object:
AllOutput <- mutate(AllOutput, date = paste(LatestActionMonth,"/",LatestActionDay,"/",LatestActionYear, sep = ""))
AllOutput$date <- as.Date(AllOutput$date, format = "%m/%d/%Y")
#add a DayMonth variable that is only the day and month so they can be displayed on the y axis:
AllOutput <- mutate(AllOutput, DayMonth = format(as.Date(date), "%m-%d"))
joinedData <- left_join(x = AllOutput, y = WomenInCongress, by = "Congress")
AllOutput <- mutate(AllOutput, date = paste(LatestActionMonth,"/",LatestActionDay,"/",LatestActionYear, sep = ""))
AllOutput$date <- as.Date(AllOutput$date, format = "%m/%d/%Y")
#add a DayMonth variable that is only the day and month so they can be displayed on the y axis:
AllOutput <- mutate(AllOutput, DayMonth = format(as.Date(date), "%m-%d"))
joinedData <- left_join(x = AllOutput, y = AllOutput, by = "Congress")
termDataJoined <- left_join(x = termsCount, y = AllOutput, by = "Congress")
plot_ly(data = AllBillsNumbers, type = "bar",
x = ~Congress, y = ~percentWomen, color = ~Total.Bills,
hoverinfo = 'text',
text = ~paste("Total Bills: ", Total.Bills, "<br>", "Women in the Bills: ", Yes.Bills))
joinedData <- left_join(x = AllOutput, y = WomenPerSession, by = "Congress")
colnames(WomenPerSession)
colnames(AllOutput)
joinedData <- left_join(x = AllOutput, y = WomenPerSession, by = "Congress")
AllOutput$Congress
WomenPerSession$Congress
WomenPerSession$Congress <- as.character(WomenPerSession$Congress)
joinedData <- left_join(x = AllOutput, y = WomenPerSession, by = "Congress")
plot_ly(data = joinedData, type = "scatter", mode = "markers",
x = ~Congress, y = ~DayMonth, color = ~Total.Women,
hoverinfo = 'text',
text = ~paste("Title:", BillTitle, "<br>", URL, "<br>Total Women: ", Total.Women, "<br>Sponsor: ", Sponsor))
plot_ly(data = joinedData, type = "scatter", mode = "markers",
x = ~Congress, y = ~DayMonth, color = ~Total.Women,
hoverinfo = 'text',
text = ~paste("Title:", Title, "<br>", URL, "<br>Total Women: ", Total.Women, "<br>Sponsor: ", Sponsor))
plot_ly(data = termDataJoined, type = "scatter", mode = "markers",
x = ~LatestActionYear, y = ~DayMonth, color = ~term,
hoverinfo = 'text',
text = ~paste("Title:", title, "<br>", URL, "<br>Total Women: ", Total.Women, "<br>Sponsor: ", Sponsor, "<br>Latest Action: ", LatestAction))
termDataJoined <- left_join(x = TermsCount, y = WomenPerSession, by = "Congress")
TermsCount$Congress <- as.character(TermsCount$Congress)
termDataJoined <- left_join(x = TermsCount, y = WomenPerSession, by = "Congress")
plot_ly(data = WomenInCongress, type = "scatter", mode= 'lines',
x = ~Congress, y = ~Total.Women,
hoverinfo = 'text',
text = ~paste("Women in the House: ", Women.in.the.House, "<br>", "Women in the Senate: ", Women.in.the.Senate))
plot_ly(data = WomenPerCongress, type = "scatter", mode= 'lines',
x = ~Congress, y = ~Total.Women,
hoverinfo = 'text',
text = ~paste("Women in the House: ", Women.in.the.House, "<br>", "Women in the Senate: ", Women.in.the.Senate))
plot_ly(data = WomenPerSession, type = "scatter", mode= 'lines',
x = ~Congress, y = ~Total.Women,
hoverinfo = 'text',
text = ~paste("Women in the House: ", Women.in.the.House, "<br>", "Women in the Senate: ", Women.in.the.Senate))
WomenPerSession$Congress <- as.integer(WomenPerSession$Congress)
plot_ly(data = WomenPerSession, type = "scatter", mode= 'lines',
x = ~Congress, y = ~Total.Women,
hoverinfo = 'text',
text = ~paste("Women in the House: ", Women.in.the.House, "<br>", "Women in the Senate: ", Women.in.the.Senate))
plot_ly(data = AllOutput, type = "scatter", mode = "markers",
x = ~Latest.Action.Year, y = ~DayMonth, color = ~SponsorParty, legendgrouptitle = "Party",
hoverinfo = 'text',
text = ~paste("Title:", BillTitle, "<br>", "URL:", URL))
plot_ly(data = AllOutput, type = "scatter", mode = "markers",
x = ~LatestActionYear, y = ~DayMonth, color = ~SponsorParty, legendgrouptitle = "Party",
hoverinfo = 'text',
text = ~paste("Title:", BillTitle, "<br>", "URL:", URL))
plot_ly(data = AllOutput, type = "scatter", mode = "markers",
x = ~LatestActionYear, y = ~DayMonth, color = ~SponsorParty, legendgrouptitle = "Party",
hoverinfo = 'text',
text = ~paste("Title:", Title, "<br>", "URL:", URL))
joinedData$Sponsor <- paste(joinedData$Sponsor," (",joinedData$SponsorParty,")", sep = "")
plot_ly(data = joinedData, type = "scatter", mode = "markers",
x = ~Congress, y = ~DayMonth, color = ~Total.Women,
hoverinfo = 'text',
text = ~paste("Title:", Title, "<br>", URL, "<br>Total Women: ", Total.Women, "<br>Sponsor: ", Sponsor))
joinedData$Sponsor <- paste(joinedData$Sponsor," (",joinedData$SponsorParty,")", sep = "")
joinedData$Congress <- as.integer(joinedData$Congress)
plot_ly(data = joinedData, type = "scatter", mode = "markers",
x = ~Congress, y = ~DayMonth, color = ~Total.Women,
hoverinfo = 'text',
text = ~paste("Title:", Title, "<br>", URL, "<br>Total Women: ", Total.Women, "<br>Sponsor: ", Sponsor))
colnames(termDataJoined)
plot_ly(data = termDataJoined, type = "scatter", mode = "markers",
x = ~LatestActionYear, y = ~DayMonth, color = ~term,
hoverinfo = 'text',
text = ~paste("Title:", title, "<br>", URL, "<br>Total Women: ", Total.Women, "<br>Sponsor: ", Sponsor, "<br>Latest Action: ", LatestAction))
colnames(termDataJoined)
plot_ly(data = termDataJoined, type = "scatter", mode = "markers",
x = ~LatestActionYear, y = ~DayMonth, color = ~term,
hoverinfo = 'text',
text = ~paste("Title:", title, "<br>", URL, "<br>Total Women: ", Total.Women, "<br>Sponsor: ", Sponsor, "<br>Latest Action: ", LatestAction))
#add a date variable that contains day, month and year and is a Date object:
termDataJoined <- mutate(termDataJoined, date = paste(LatestActionMonth,"/",LatestActionDay,"/",LatestActionYear, sep = ""))
termDataJoined$date <- as.Date(termDataJoined$date, format = "%m/%d/%Y")
#add a DayMonth variable that is only the day and month so they can be displayed on the y axis:
termDataJoined <- mutate(termDataJoined, DayMonth = format(as.Date(date), "%m-%d"))
plot_ly(data = termDataJoined, type = "scatter", mode = "markers",
x = ~LatestActionYear, y = ~DayMonth, color = ~term,
hoverinfo = 'text',
text = ~paste("Title:", title, "<br>", URL, "<br>Total Women: ", Total.Women, "<br>Sponsor: ", Sponsor, "<br>Latest Action: ", LatestAction))
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(shiny)
# Define UI ----
ui <- fluidPage(
titlePanel("Basic widgets"),
fluidRow(
column(3,
h3("Buttons"),
actionButton("action", "Action"),
br(),
br(),
submitButton("Submit")),
column(3,
h3("Single checkbox"),
checkboxInput("checkbox", "Choice A", value = TRUE)),
column(3,
checkboxGroupInput("checkGroup",
h3("Checkbox group"),
choices = list("Choice 1" = 1,
"Choice 2" = 2,
"Choice 3" = 3),
selected = 1)),
column(3,
dateInput("date",
h3("Date input"),
value = "2014-01-01"))
),
fluidRow(
column(3,
dateRangeInput("dates", h3("Date range"))),
column(3,
fileInput("file", h3("File input"))),
column(3,
h3("Help text"),
helpText("Note: help text isn't a true widget,",
"but it provides an easy way to add text to",
"accompany other widgets.")),
column(3,
numericInput("num",
h3("Numeric input"),
value = 1))
),
fluidRow(
column(3,
radioButtons("radio", h3("Radio buttons"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3),selected = 1)),
column(3,
selectInput("select", h3("Select box"),
choices = list("Choice 1" = 1, "Choice 2" = 2,
"Choice 3" = 3), selected = 1)),
column(3,
sliderInput("slider1", h3("Sliders"),
min = 0, max = 100, value = 50),
sliderInput("slider2", "",
min = 0, max = 100, value = c(25, 75))
),
column(3,
textInput("text", h3("Text input"),
value = "Enter text..."))
)
)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
Frequency <- read.csv('https://raw.githubusercontent.com/makennagall/WomenInCongress/main/frequency.csv')
WomenPerSession <- read.csv('https://raw.githubusercontent.com/makennagall/WomenInCongress/main/WomenPerSession.csv')
AllOutput <- read.csv('https://raw.githubusercontent.com/makennagall/WomenInCongress/main/compiledNewOutputs.csv')
TermsCount <- read.csv('https://raw.githubusercontent.com/makennagall/WomenInCongress/main/termsCountNew.csv')
WomenPerSession <- read.csv("https://raw.githubusercontent.com/makennagall/WomenInCongress/main/WomenPerSession.csv")
colnames(OldAllOutput)
Frequency <- read.csv('https://raw.githubusercontent.com/makennagall/WomenInCongress/main/frequency.csv')
WomenPerSession <- read.csv('https://raw.githubusercontent.com/makennagall/WomenInCongress/main/WomenPerSession.csv')
AllOutput <- read.csv('https://raw.githubusercontent.com/makennagall/WomenInCongress/main/compiledNewOutputs.csv')
TermsCount <- read.csv('https://raw.githubusercontent.com/makennagall/WomenInCongress/main/termsCountNew.csv')
WomenPerSession <- read.csv("https://raw.githubusercontent.com/makennagall/WomenInCongress/main/WomenPerSession.csv")
colnames(WomenPerSession)
colnames(AllOutput)
AllOutput$Congress <- as.integer(AllOutput$Congress)
WomenPerSession$Congress <- as.integer(WomenPerSession$Congress)
#add a date variable that contains day, month and year and is a Date object:
AllOutput <- mutate(AllOutput, date = paste(LatestActionMonth,"/",LatestActionDay,"/",LatestActionYear, sep = ""))
library(dplyr)
library(shiny)
library(plotly)
library(forcats)
library(dplyr)
AllOutput$Congress <- as.integer(AllOutput$Congress)
WomenPerSession$Congress <- as.integer(WomenPerSession$Congress)
#add a date variable that contains day, month and year and is a Date object:
AllOutput <- mutate(AllOutput, date = paste(LatestActionMonth,"/",LatestActionDay,"/",LatestActionYear, sep = ""))
AllOutput$date <- as.Date(AllOutput$date, format = "%m/%d/%Y")
#add a DayMonth variable that is only the day and month so they can be displayed on the y axis:
AllOutput <- mutate(AllOutput, DayMonth = format(as.Date(date), "%m-%d"))
joinedData <- left_join(x = AllOutput, y = WomenPerSession, by = "Congress")
termDataJoined <- left_join(x = TermsCount, y = WomenPerSession, by = "Congress")
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
colnames(event_data)
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
shinyApp(ui = ui, server = server)
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
library(ggplot2)
runApp('CongressApp.R')
runApp('CongressApp.R')
runApp('CongressApp.R')
